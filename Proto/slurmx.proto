syntax = "proto3";

package SlurmxGrpc;

import "PublicDefs.proto";
import "google/protobuf/duration.proto";

message Negotiation {
  uint32 version = 1;
}

message StreamRequestNegotiation {
  uint32 version = 1;
}

message StreamReplyResult {
  bool ok = 1;
  string reason = 2; // Set when failed
}

message InteractiveTaskAllocRequest {
  Resources required_resources = 1;
  string partition_name = 2;
  uint64 time_limit_sec = 3;
}

message InteractiveTaskAllocReply {
  bool ok = 1;
  oneof payload {
    uint32 task_id = 2;
    string reason = 3;
  }
}

message InteractiveTaskAllocationDetail {
  /* Used to connect the SlurmXd node */
  uint32 node_index = 1;
  string ipv4_addr = 2;
  uint32 port = 3;
  bytes resource_uuid = 4;
}

message QueryInteractiveTaskAllocDetailRequest {
  uint32 task_id = 1;
}

message QueryInteractiveTaskAllocDetailReply {
  bool ok = 1;
  InteractiveTaskAllocationDetail detail = 2;
}

message StreamRequestCheckResource {
  bytes resource_uuid = 1;
  uint32 task_id = 2;
}

message StreamRequestExecutiveInfo {
  string executive_path = 1;
  repeated string arguments = 2;
}

message StreamReplyIo {
  string buf = 1;
}

message StreamReplyExitStatus {
  enum ExitReason {
    Normal = 0;
    Signal = 1;
  }

  ExitReason reason = 1;
  uint32 value = 2;
}

message SrunXStreamRequest{
  enum Type {
    NegotiationRequest = 0;
    CheckResource = 1;
    ExecutiveInfo = 2;
    Signal = 3;
  }
  Type type = 1;

  oneof payload {
    StreamRequestNegotiation negotiation = 2;
    StreamRequestExecutiveInfo exec_info = 3;
    int32 signum = 4;
    StreamRequestCheckResource check_resource = 5;
  }
}

message SrunXStreamReply {
  enum Type {
    IoRedirection = 0;
    ExitStatus = 1;
    Result = 2;
  }
  Type type = 1;

  oneof payload {
    StreamReplyIo io = 2 ;
    StreamReplyExitStatus exit_status = 3;
    StreamReplyResult result = 4;
  }
}

message SlurmXdRegisterRequest {
  Negotiation header = 1;

  uint32 port = 2;
  string node_name = 3;
  string partition_name = 4;

  Resources resource_total = 5;
  uint64 time_limit_for_task_in_sec = 6;

  /* Todo: Add fields describing what tasks the SlurmXd is still running and the current usage of this node in case that
      from CtlXd's view, this node is down due to network problem and however this node is still running.
  */
}

message SlurmXdRegisterResult {
  bool ok = 1;
  oneof payload {
    // If ok is true
    XdNodeId node_id = 2;

    // If ok is false, reason is set.
    string reason = 3;
  }
}

message TaskStatusChangeRequest {
  uint32 task_id = 1;
  TaskStatus new_status = 2;
  string reason = 3;
}

message TaskStatusChangeReply {
  bool ok = 1;
}

message SubmitBatchTaskRequest {
  /* --------- Fields that are shared between all types of tasks ----------------- */
  string executive_path = 1;
  repeated string arguments = 2;

  google.protobuf.Duration time_limit = 3;
  string partition_name = 4;
  Resources required_resources = 5;

  /* -------------------- Fields that are batch task only ------------------------ */
  string output_file_pattern = 6;
}

message SubmitBatchTaskReply {
  bool ok = 1;
  oneof payload{
    uint32 task_id = 2;
    string reason = 3;
  }
}

message ExecuteTaskRequest {
  Task task = 1;
  oneof additional_meta {
    BatchTaskAdditionalMeta batch_meta = 2;
    InteractiveTaskAdditionalMeta interactive_meta = 3;
  }
}

message ExecuteTaskReply {
  bool ok = 1;
  string reason = 2;
}

message TerminateTaskRequest {
  uint32 task_id = 1;
}

message TerminateTaskReply {
  bool ok = 1;
  string reason = 2;
}

// Todo: Divide service into two parts: one for SlurmXd and one for SrunX
//  We need to distinguish the message sender
//  and have some kind of authentication
service SlurmCtlXd {
  /* RPCs called from SlurmXd*/
  rpc RegisterSlurmXd(SlurmXdRegisterRequest) returns (SlurmXdRegisterResult);
  rpc TaskStatusChange(TaskStatusChangeRequest) returns (TaskStatusChangeReply);


  /* RPCs called from SrunX */
  /* When SrunX request an interactive job, it will first request SrunX to allocate
     an interactive task and get the related meta information. */
  rpc AllocateInteractiveTask(InteractiveTaskAllocRequest) returns(InteractiveTaskAllocReply);
  rpc QueryInteractiveTaskAllocDetail(QueryInteractiveTaskAllocDetailRequest) returns(QueryInteractiveTaskAllocDetailReply);

  rpc TerminateTask(TerminateTaskRequest) returns (TerminateTaskReply);

  /* RPCs called from sbatch */
  rpc SubmitBatchTask(SubmitBatchTaskRequest) returns(SubmitBatchTaskReply);
}

service SlurmXd {
  /* ----------------------------------- Called from SlurmCtlXd ---------------------------------------------------- */
  // Todo: Granting and revoking Resource UUID can be merged into ExecuteTask and TerminateTask. Remove this two RPC.

  /* If the task is a batch task, it will run immediately.
     If the task is an interactive task, slurmxd will just allocate the resource and waiting for
     further SrunXStream to execute a real task.
   */
  rpc ExecuteTask(ExecuteTaskRequest) returns(ExecuteTaskReply);

  /*
  If the task is an interactive task, the resource uuid is also revoked.
   If there's no process in this interactive task, just deallocate all the resources.
   If there are processes in this interactive task, kill all the processes and deallocate resources.
  If the task is a batch task, just kill it.
  */
  rpc TerminateTask(TerminateTaskRequest) returns (TerminateTaskReply);


  /* ----------------------------------- Called from SrunX --------------------------------------------------------- */
  rpc SrunXStream(stream SrunXStreamRequest) returns (stream SrunXStreamReply);
}